renderer.h:

vertexbuffer类：顶点缓冲区类，将cpu端的顶点数据送入GPU的顶点缓冲区里，供后续流程调用（主要是GPU的各个shader）

vertexlayout类：顶点缓冲区布局类，CPU传送给GPU的都是一串由0和1组成的数据，需要再给GPU传送解释这些数据的方法；
比如：几个（count），什么类型（type），是否标准化（normalized），你一个单位的顶点数据占了多长字节（stride）。
举例：1个顶点有3个float数表示空间中xyz坐标，3个float数表示法线，2个float数表示纹理坐标，再来两个char字节表示其他什么的值，那一个顶点的步长就是8个float的长度加上两个char的长度。

vertexarray类：顶点数组类，管理缓冲区布局类的类。

indexbuffer类：顶点索引缓冲区类，因为在真实的渲染或者绘图流程里，对顶点的重用非常常见，且一个顶点所占用的空间会比较大（3float坐标，3float法线，2float纹理以及其他），与其相同的顶点重复很多次，不如用索引来使用他们。

shader类：管理shader文件编译使用及uniform变量的类。
shader就是写给gpu的程序，GPU生成最终图像的程序。
加载外部写好的shader代码，用OpenGL的api编译并使用；
uniform变量就是一个在主程序和shader程序那边同时存在的值，在主程序这边修改这个值会同步到shader程序那边，用法很多。

texture类：texture（纹理）类，就是将图片加载出来，然后将数据发送到预设好的纹理槽里，以供shader调用，贴到生成的模型上，增加复杂度。

model_trans类：每个模型的内置属性类之一。
一个场景里通常不会只有一个模型，每个模型都需要通过缩放，旋转，平移这三者的组合变换成大小，方向，位置合适的坐标。

camera类：摄像机类，提供视图矩阵和投影矩阵。
我们观察一个场景需要一个摄像机，摄像机有坐标，角度，方向。然后最终得到的图像也要确定是正射投影还是透视投影。

lighting类：光照类，真实世界中的颜色事实上是由光的吸收反射等等的复杂的过程得到的。按照光照的规律生成颜色，能得到真实感极高的图像。但计算机算力有限，因此只能用模型模拟光照的规律。
环境光+漫反射光+高光：物体颜色

